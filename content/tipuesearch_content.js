var tipuesearch = {"pages": [{'title': 'About', 'text': '倉儲: https://github.com/41023101/cp2023_ag1 \xa0 \n 組別網站: https://41023101.github.io/cp2023_ag1/content/index.html \xa0 \n 組長網頁 : \n 41023101: https://41023101.github.io/cp2023/content/index.html \xa0 \n 組員網頁 : \n 41023131: https://george0324.github.io/cp2023/content/index.html \xa0 \n 41023141: https://41023141.github.io/cp2023/content/index.html \xa0 \n 41223101: https://yan41223101.github.io/cp2023/content/index.html \xa0 \n 41223104: https://41223104.github.io/cp2023/content/index.html \xa0 \n 41223105: https://41223105.github.io/cp2023/content/index.html \xa0 \n 41223106: https://cya41223106.github.io/cp2023/content/index.html \xa0 \n 41223120: https://41223120.github.io/cp2023/content/index.html \xa0 \n 41223153: https://41223153.github.io/cp2023/content/index.html \xa0 \n', 'tags': '', 'url': 'About.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n \n', 'tags': '', 'url': 'Brython.html'}, {'title': 'progress', 'text': 'w7 \n 如何建立各組協同網站說明影片 \n 如何將協同網站設定協同者後, import 進入 Replit 說明影片 \n 說明如何進行基本的 gd 繪圖 \n 進行九人一排分組, 期中成績預計送出個人期望成績. \n cp2023 計算機程式教學內容 check list: \n \n 各學員要有 github 帳號, 且將 user name 登錄到 \xa0 1a \xa0 與 \xa0 1b \xa0 的倉儲, 內容必須與個人的 github 帳號相同 ( 1a \xa0 與 \xa0 1b ), 各用戶若修改帳號, 必須透過 Pull Requests 要求將新資料合併 ( Pull Requests 說明 ). \n 各學員要有 \xa0 Replit \xa0 帳號且與 Github connect, 能夠從 Replit 啟動網頁編輯, 轉為靜態網站內容後, 送回 Github 的個人 cp2023 倉儲與網站. (還有兩種方式可以維護倉儲與網站, \xa0 近端 與 自架主機 上進行內容維護) \n 目前會經常使用的 git add, git commit, git push, git pull, git status, git branch, git checkout \n C 程式的繪圖 - Gnuplot, gd, raylib ( 近端繪圖說明 )\xa0 \n \n w8  之前所指令的程式練習作業 : \n 上課內容 中的 Exercises \n w2-w5 \xa0 週任務中的 Exercises \n w6-w7 \xa0 週任務中的練習一與練習二 \n 請利用 C 結合 gd 繪圖程式庫, 畫出 \xa0 PROC , \xa0 United Kingdom , \xa0 Japan \xa0 與 \xa0 South Korea \xa0 Flags. \n 各分組成員協同將 \xa0 jsliu_c_programming.pdf \xa0 (需要下載密碼) 內容整理後, 放入各分組網站. \n w9  程式練習 : \n 2b w8 作業: 請根據\xa0 cad2023_2b_w8.txt \xa0檔案中的內容, 透過程式的讀取與篩選, 按照時間先後, 列出 2b 修課學員中已經登入 s1511.cycu.org 的學號. (修課學員名單\xa02a:\xa0 0838 , 2b:\xa0 0851 ) \n 假如在近端處理, 必須同時儲存兩個檔案後, 進行資料選取: \n get_stud_num_from_last_data.py \xa0(若採 Brython 編寫, 可以直接 列出結果 , 依照登入時間先後排序, 其中 41123227 為管理者最早測試時登入, 若採用 ANSI 編寫: \xa0 c_parse_last_cp2023.7z ) \n w11 : 針對 s1511 伺服器, 新增別名 (在 DNS 術語中稱為 CNAME) s, 因此可以透過 \xa0 https://s.cycu.org/~pj2022/cpnote \xa0 擷取工作站室中的課堂筆記網頁. \n 使用 Letsencrypy 中的 \xa0 certbot certonly -d s1511.cycu.org -d s.cycu.org \xa0 指令, 執行之前可以利用 sudo /etc/init.d/nginx stop 關掉 nginx, 並在上述擴充網域數位簽章的過程, 讓 certbot 指令啟動 local web server 進行主機認證, 即透過登記在 DNS 伺服器中的 IPv6 address 確認主機位址. \n 擴增伺服器別名後, 以 sudo /etc/init.d/nginx start 重新啟動全球資訊網伺服器, 並且以 sudo /etc/init.d/stunnel4 restart 重新啟動 https 代理伺服器. \n 項目1: 如何快速設定電腦輔助設計室中的網路 - 採 IPv6 網路設定. \n 請檢查隨身碟中的網路設定程式, 確認帶有可攜程式環境以及網路設定相關檔案. \n 目的是能夠在啟動隨身系統之後, 可以透過 rsa private key 以 SSH 取下個人倉儲, 並能啟動編輯後轉檔, 擁有推送回 github 的權限. \n 各組組長能夠在取下分組倉儲後, 以個人 IPv6 位址啟動後, 允許分組組員登入修改網頁內容, 並透過組長的 rsa private key 推送回 github. \n 個人與分組組員能在近端編寫 C 程式, 完成編譯連結後將程式碼與結果放入網頁, 並編寫相關心得報告. \n 以上近端操作流程, 也可以在 s1511 與 Replit 伺服器上進行個人與分組倉儲及網頁的改版. \n w11_1a.7z \xa0(第十一週 1a 上課時建立的共用網路設定檔案) \n 項目2: 請分別利用 Replit、s1511.cycu.org 或 localhost 維護個人與分組的網站內容, 並比較不同方法開發計算計程式的優缺點. \n Replit \xa0 必須先在 Github 安裝 Replit Application 授權之後, 再 import 倉儲. \n import 倉儲後, 必須先設定 Run 執行內容, 取下 submodule, 並安裝倉儲編輯所需的模組以及設定 secrets 頁面中的 config 變數後, 才能啟動編輯網頁. \n s1511 \xa0 則需要先設定 keys 與 session config, 然後才能將倉儲以 SSH clone 至個人帳號下, 修改個人或分組所分配到的內部連網埠號後, 以 python3 server.py 執行網頁編輯. 也可透過 acp 設法讓動態與靜態網站內容同步. \n localhost \xa0 則可以使用 s1511 中的 private key, 經由 puttygen 轉檔後使用, 以 SSH clone 至個人隨身碟後, 可以利用 cms 啟動編輯網站, 修改內容並轉為靜態網站後, 以 acp 將改版資料新增提交推送到 Github. 若修改倉儲中的 init.py, 置入所在電腦的外部 IPv6 位址, 則可以 cms 啟動後, 修改管理者密碼, 讓其他組員連線至所啟動的動態或靜態網站內容. \n 各學員在以上採多個不同方式維護個人與分組網站的過程, 可以在改版之前先行 git pull, 以減少合併的內容. \n 項目3: 程式練習: \n w8 之前所指令的程式練習作業 : \n 上課內容 中的 Exercises \n w2-w5 \xa0 週任務中的 Exercises \n w6-w7 \xa0 週任務中的練習一與練習二 \n 請利用 C 結合 gd 繪圖程式庫, 畫出 \xa0 PROC , \xa0 United Kingdom , \xa0 Japan \xa0 與 \xa0 South Korea \xa0 Flags. \n 各分組成員協同將 \xa0 jsliu_c_programming.pdf \xa0 (需要下載密碼) 內容整理後, 放入各分組網站. \n w12 : \n w12_1b_1.mp4 \xa0 (說明如何在 Replit, s.cycu.org 與 Windows 中執行 C 程式) \n w12_1b_2.mp4 \xa0 (說明如何在 Replit, s.cycu.org 與 Windows 中執行 C 程式的 gd 繪圖) \n w12_1b_3.mp4 \xa0 (說明如何在 Windows 共用 s.cycu.org 上的 id_rsa 私鑰, 轉為 .ppk 之後, 可以再結合 .gitconfig 中的 http.proxy 設定, 以 SSH 加上 https 取下個人或分組倉儲後, 在 Windows 啟動編輯改版後推至 Github) \n w13 : \n w13_1a_1.mp4 \xa0 (四分鐘之後沒有聲音, 內容請參考下一個影片) \n w13_1a_2.mp4 \xa0 (補充說明第一部影片的內容) \n w13_1a_3.mp4 \xa0 (說明從 C, Javascript 與 Python 在計算機程式的應用歷程) \n w13_1a_4.mp4 \xa0 (說明如何在近端建立 OpenSSH 格式的 public key, putty 格式的 private 並且配合 putty session 讓使用者可以將倉儲 git clone 到近端維護) \n 利用 C 程式語法, 採 數值分析方法 (Numerical Analysis Methods) 解常微分方程式 , 並將分析結果, 以 \xa0 Gnuplot \xa0 繪出 png 圖檔. \n SciTE指令 : \n [ http ] \xa0 \xa0 proxy = \xa0 http://p4.cycu.org:3128 \n 也可以透過命令列中輸入 git config --global http.proxy \xa0 http://p4.cycu.org:3128 \xa0取得 \n 這是設定 git 指令需要使用 http 或 https 協定擷取 cmsimde 時, 假如網路只支援 IPv6, 就必須透過代理主機連線到目前只支援 IPv4 的 github.com \n [ user ] \xa0 \xa0 name = 你的 github 帳號 \xa0 \xa0 email = 登記在 github 帳號的 email \n 是在 git commit -m "提交訊息" 時綁定身分用 \n [ safe] \xa0 \xa0 directory = * \n 則是宣告目前所使用的檔案目錄都是 safe \n [http "https://github.com"] \xa0 \xa0 sslVerify = false \n 表示當連線到 github.com 時所使用的 key 不用登記在 Windows 操作系統中 \n [ pull ] \xa0 \xa0 rebase = false \n 表示 git pull 時, 並不使用 rebase, 而是直接 fetch 遠端資料, 並且進行 merge 合併 \n w14 : \n 延續\xa0 https://mde.tw/cpnote/content/w10-w11 \xa0 中的項目執行內容. \n w15 : \n w15_1a_1.mp4 \xa0 (說明課程總結, 並且更新可以開發 C 靜態與動態繪圖的程式環境) \n w15_1a_2.mp4 \xa0 (在 Replit, s.cycu.org 與 localhost 中保持與 github 倉儲同步) \n 課堂考試題目: \n 1) 根據 \xa0 roc_list_coord_flag.7z \xa0 程式內容所印出的六組 ABED 等繪製 ROC 國旗白日圖案中的菱形四個關鍵點, 請直接在青天與滿地紅的圖案中, 利用白色作為畫線顏色, 將第二組的 ABED 等四個點的座標, 以直線相連. 2) 承上題, 請列出第二組 ABED 的四條直線與白日中的大圓所相交 (intersect) 的四個點座標. 請在個人的 w15 頁面中完成上列兩個題目的操作後, 製作一個 Wink 影片說明操作過程與結果, 完成後請將個人網頁連結提供本對談的回應中(即回應到 CP2023 的團隊貼文下方). \n w16  Final Project \xa0 ( 圖片來源 ): \n \n \n 1. 請利用 C + gd 繪圖程式庫重新繪製 Figure 1 的質量、彈簧與阻尼器與左右牆面的配置圖. \n 2. 當 m1 的起始位置為 1, m2 的起始位置為 -0.5 且 m1, m2 的起始速度都為 0 的情況下, 請利用 C + gnuplot 繪製從 t=0 到 t=10 秒之間, m1 與 m2 的位置以及速度相對於時間的趨勢圖. \n', 'tags': '', 'url': 'progress.html'}, {'title': 'gd prac', 'text': '\n \n \n \n \n \n \n #include <stdio.h> \n #include <gd.h> \n #include <math.h> \n \xa0 \xa0 \n // Declare the rotation function \n void   rotateFilledPolygon( int   x_orig,  int   y_orig,  double   rotation_ang, gdPoint *points,  int   num_points) { \n \xa0\xa0\xa0\xa0 int   i; \n \xa0\xa0\xa0\xa0 double   angle_rad = rotation_ang * M_PI / 180.0; \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 for   (i = 0; i < num_points; i++) { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 int   x = points[i].x - x_orig; \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 int   y = points[i].y - y_orig; \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 points[i].x = x_orig + ( int )(x *  cos (angle_rad) - y *  sin (angle_rad)); \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 points[i].y = y_orig + ( int )(x *  sin (angle_rad) + y *  cos (angle_rad)); \n \xa0\xa0\xa0\xa0 } \n } \n \xa0 \xa0 \n int   main() { \n \xa0\xa0\xa0\xa0 int   width = 800; \n \xa0\xa0\xa0\xa0 int   height = 600; \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 gdImagePtr img = gdImageCreateTrueColor(width, height); \n \xa0\xa0\xa0\xa0 gdImageAlphaBlending(img, 0); \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 FILE   *outputFile =  fopen ( "hellogd1.png" ,  "wb" ); \n \xa0\xa0\xa0\xa0 if   (outputFile == NULL) { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 fprintf (stderr,  "Error opening the output file.\\n" ); \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 return   1; \n \xa0\xa0\xa0\xa0 } \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 int   red = gdImageColorAllocate(img, 255, 0, 0); \n \xa0\xa0\xa0\xa0 int   blue = gdImageColorAllocate(img, 0, 0, 255); \n \xa0\xa0\xa0\xa0 int   black = gdImageColorAllocate(img, 0, 0, 0); \n \xa0\xa0\xa0\xa0 int   white = gdImageColorAllocate(img, 255, 255, 255); \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 gdImageFilledRectangle(img, 0, 0, width, height, white); \n \xa0\xa0\xa0\xa0 gdImageFilledRectangle(img, 0, 0, ( int )width / 4, ( int )height / 4, blue); \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 gdImageFilledEllipse(img, ( int )width * 3 / 4, ( int )height / 4, ( int )width / 4, ( int )width / 4, red); \n \xa0\xa0\xa0\xa0 gdImageEllipse(img, ( int )width * 3 / 4, ( int )height * 3 / 4, ( int )width / 4, ( int )width / 4, red); \n \xa0\xa0\xa0\xa0 gdImageLine(img, ( int )width / 2, ( int )height / 2, ( int )width / 2, ( int )height / 2 + 100, blue); \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 gdPoint points[4]; \n \xa0\xa0\xa0\xa0 points[0].x = ( int )width / 4; \n \xa0\xa0\xa0\xa0 points[0].y = ( int )height * 3 / 4; \n \xa0\xa0\xa0\xa0 points[1].x = points[0].x + 100; \n \xa0\xa0\xa0\xa0 points[1].y = points[0].y; \n \xa0\xa0\xa0\xa0 points[2].x = points[1].x; \n \xa0\xa0\xa0\xa0 points[2].y = points[1].y + 100; \n \xa0\xa0\xa0\xa0 points[3].x = points[2].x - 100; \n \xa0\xa0\xa0\xa0 points[3].y = points[2].y; \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 // Call the rotation function \n \xa0\xa0\xa0\xa0 rotateFilledPolygon(( int )width / 4 + 50, ( int )height * 3 / 4 + 50, 45.0, points, 4); \n \xa0\xa0\xa0\xa0 gdImagePolygon(img, points, 4, black); \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 gdPoint points2[4]; \n \xa0\xa0\xa0\xa0 points2[0].x = ( int )width / 3; \n \xa0\xa0\xa0\xa0 points2[0].y = ( int )height / 2; \n \xa0\xa0\xa0\xa0 points2[1].x = points2[0].x + 100; \n \xa0\xa0\xa0\xa0 points2[1].y = points2[0].y; \n \xa0\xa0\xa0\xa0 points2[2].x = points2[1].x; \n \xa0\xa0\xa0\xa0 points2[2].y = points2[1].y + 100; \n \xa0\xa0\xa0\xa0 points2[3].x = points2[2].x - 150; \n \xa0\xa0\xa0\xa0 points2[3].y = points2[2].y; \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 // Call the rotation function \n \xa0\xa0\xa0\xa0 rotateFilledPolygon(( int )width / 3 + 50, ( int )height / 2 + 50, 30.0, points2, 4); \n \xa0\xa0\xa0\xa0 gdImageFilledPolygon(img, points2, 4, red); \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 gdImagePngEx(img, outputFile, 9); \n \xa0\xa0\xa0\xa0 fclose (outputFile); \n \xa0\xa0\xa0\xa0 gdImageDestroy(img); \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 return   0; \n } \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17 \n 18 \n 19 \n 20 \n 21 \n 22 \n 23 \n 24 \n 25 \n 26 \n 27 \n 28 \n 29 \n 30 \n 31 \n 32 \n 33 \n 34 \n 35 \n 36 \n 37 \n 38 \n 39 \n 40 \n 41 \n 42 \n 43 \n 44 \n 45 \n 46 \n 47 \n 48 \n 49 \n 50 \n 51 \n 52 \n 53 \n 54 \n 55 \n 56 \n 57 \n 58 \n 59 \n 60 \n 61 \n 62 \n 63 \n 64 \n 65 \n 66 \n 67 \n 68 \n 69 \n 70 \n 71 \n 72 \n 73 \n 74 \n 75 \n 76 \n 77 \n 78 \n 79 \n 80 \n 81 \n 82 \n \n \n \n #include <stdio.h> \n #include <gd.h> \n #include <math.h> \n \xa0 \xa0 \n // Declare the rotation function \n void   rotateFilledPolygon( int   x_orig,  int   y_orig,  double   rotation_ang, gdPoint *points,  int   num_points) { \n \xa0\xa0\xa0\xa0 int   i; \n \xa0\xa0\xa0\xa0 double   angle_rad = rotation_ang * M_PI / 180.0; \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 for   (i = 0; i < num_points; i++) { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 int   x = points[i].x - x_orig; \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 int   y = points[i].y - y_orig; \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 points[i].x = x_orig + ( int )(x *  cos (angle_rad) - y *  sin (angle_rad)); \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 points[i].y = y_orig + ( int )(x *  sin (angle_rad) + y *  cos (angle_rad)); \n \xa0\xa0\xa0\xa0 } \n } \n \xa0 \xa0 \n int   main() { \n \xa0\xa0\xa0\xa0 int   width = 800; \n \xa0\xa0\xa0\xa0 int   height = 600; \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 gdImagePtr img = gdImageCreateTrueColor(width, height); \n \xa0\xa0\xa0\xa0 gdImageAlphaBlending(img, 0); \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 FILE   *outputFile =  fopen ( "./../images/hellogd2.png" ,  "wb" ); \n \xa0\xa0\xa0\xa0 if   (outputFile == NULL) { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 fprintf (stderr,  "Error opening the output file.\\n" ); \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 return   1; \n \xa0\xa0\xa0\xa0 } \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 int   red = gdImageColorAllocate(img, 255, 0, 0); \n \xa0\xa0\xa0\xa0 int   blue = gdImageColorAllocate(img, 0, 0, 255); \n \xa0\xa0\xa0\xa0 int   black = gdImageColorAllocate(img, 0, 0, 0); \n \xa0\xa0\xa0\xa0 int   white = gdImageColorAllocate(img, 255, 255, 255); \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 gdImageFilledRectangle(img, 0, 0, width, height, white); \n \xa0\xa0\xa0\xa0 gdImageFilledRectangle(img, 0, 0, ( int )width / 4, ( int )height / 4, blue); \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 gdImageFilledEllipse(img, ( int )width * 3 / 4, ( int )height / 4, ( int )width / 4, ( int )width / 4, red); \n \xa0\xa0\xa0\xa0 gdImageEllipse(img, ( int )width * 3 / 4, ( int )height * 3 / 4, ( int )width / 4, ( int )width / 4, red); \n \xa0\xa0\xa0\xa0 gdImageLine(img, ( int )width / 2, ( int )height / 2, ( int )width / 2, ( int )height / 2 + 100, blue); \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 gdPoint points[4]; \n \xa0\xa0\xa0\xa0 points[0].x = ( int )width / 4; \n \xa0\xa0\xa0\xa0 points[0].y = ( int )height * 3 / 4; \n \xa0\xa0\xa0\xa0 points[1].x = points[0].x + 100; \n \xa0\xa0\xa0\xa0 points[1].y = points[0].y; \n \xa0\xa0\xa0\xa0 points[2].x = points[1].x; \n \xa0\xa0\xa0\xa0 points[2].y = points[1].y + 100; \n \xa0\xa0\xa0\xa0 points[3].x = points[2].x - 100; \n \xa0\xa0\xa0\xa0 points[3].y = points[2].y; \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 // Call the rotation function multiple times \n \xa0\xa0\xa0\xa0 for   ( int   i = 0; i < 4; i++) { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 rotateFilledPolygon(( int )width / 4 + 50, ( int )height * 3 / 4 + 50, 30.0, points, 4); \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 gdImagePolygon(img, points, 4, black); \n \xa0\xa0\xa0\xa0 } \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 gdPoint points2[4]; \n \xa0\xa0\xa0\xa0 points2[0].x = ( int )width / 3; \n \xa0\xa0\xa0\xa0 points2[0].y = ( int )height / 2; \n \xa0\xa0\xa0\xa0 points2[1].x = points2[0].x + 100; \n \xa0\xa0\xa0\xa0 points2[1].y = points2[0].y; \n \xa0\xa0\xa0\xa0 points2[2].x = points2[1].x; \n \xa0\xa0\xa0\xa0 points2[2].y = points2[1].y + 100; \n \xa0\xa0\xa0\xa0 points2[3].x = points2[2].x - 150; \n \xa0\xa0\xa0\xa0 points2[3].y = points2[2].y; \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 // Call the rotation function multiple times \n \xa0\xa0\xa0\xa0 for   ( int   i = 0; i < 12; i++) { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 //rotateFilledPolygon((int)width / 3 + 50, (int)height / 2 + 50, 30.0, points2, 4); \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 rotateFilledPolygon(500, 200, 30.0, points2, 4); \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 gdImageFilledPolygon(img, points2, 4, red); \n \xa0\xa0\xa0\xa0 } \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 gdImagePngEx(img, outputFile, 9); \n \xa0\xa0\xa0\xa0 fclose (outputFile); \n \xa0\xa0\xa0\xa0 gdImageDestroy(img); \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 return   0; \n } \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'gd prac.html'}, {'title': 'flag', 'text': '各國國旗', 'tags': '', 'url': 'flag.html'}, {'title': 'ROC', 'text': '\n \n \n \n \n \n \n // https://en.wikipedia.org/wiki/Flag_of_the_Republic_of_China \n // 內政部國旗參考資料: https://www.moi.gov.tw/cp.aspx?n=10621 \n // cc roc_flag_in_gd.c -lgd -lm to link with gd and math library \n // https://www.rapidtables.com/web/color/RGB_Color.html \n // 幾何形狀著色與繪圖練習 \n // 以下 gd 繪圖程式嘗試畫出 ROC 國旗, 請根據下列程式內容完成後續的國旗繪圖 \n #include <stdio.h> \n #include <gd.h> \n #include <math.h> \n \xa0 \n void   draw_roc_flag(gdImagePtr img); \n void   draw_white_sun(gdImagePtr img,  int   x,  int   y,  int   size,  int   color); \n \xa0 \n int   main() { \n \xa0\xa0\xa0\xa0 // width 3: height 2 \n \xa0\xa0\xa0\xa0 int   width = 1200; \n \xa0\xa0\xa0\xa0 // 國旗長寬比為 3:2 \n \xa0\xa0\xa0\xa0 int   height = ( int )(width*2.0 / 3.0); \n \xa0 \n \xa0\xa0\xa0\xa0 gdImagePtr img = gdImageCreateTrueColor(width, height); \n \xa0\xa0\xa0\xa0 gdImageAlphaBlending(img, 0); \n \xa0 \n \xa0\xa0\xa0\xa0 draw_roc_flag(img); \n \xa0 \n \xa0\xa0\xa0\xa0 FILE   *outputFile =  fopen ( "./../images/roc_flag_in_gd.png" ,  "wb" ); \n \xa0\xa0\xa0\xa0 if   (outputFile == NULL) { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 fprintf (stderr,  "Error opening the output file.\\n" ); \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 return   1; \n \xa0\xa0\xa0\xa0 } \n \xa0\xa0\xa0\xa0 gdImagePngEx(img, outputFile, 9); \n \xa0\xa0\xa0\xa0 fclose (outputFile); \n \xa0\xa0\xa0\xa0 gdImageDestroy(img); \n \xa0\xa0\xa0\xa0 return   0; \n } \n \xa0 \n void   draw_roc_flag(gdImagePtr img) { \n \xa0\xa0\xa0\xa0 int   width = gdImageSX(img); \n \xa0\xa0\xa0\xa0 int   height = gdImageSY(img); \n \xa0\xa0\xa0\xa0 int   red, white, blue; \n \xa0\xa0\xa0\xa0 // 白日位於青天面積正中央, 因此中心點座標為長寬各 1/4 處 \n \xa0\xa0\xa0\xa0 int   center_x = ( int )(width/4); \n \xa0\xa0\xa0\xa0 int   center_y = ( int )(height/4); \n \xa0\xa0\xa0\xa0 // gdImageFilledEllipse 需以長寬方向的 diameter 作圖 \n \xa0\xa0\xa0\xa0 // 由於中央白日圓形的半徑為青天寬度的 1/8 \n \xa0\xa0\xa0\xa0 // 因此中央白日圓形的直徑為青天寬度的 1/4, 也就是國旗寬度的 1/8 \n \xa0\xa0\xa0\xa0 // 而且白日十二道光芒的外圍圓形其半徑也是國旗寬度的1/8 \n \xa0\xa0\xa0\xa0 int   sun_radius = ( int )(width/8); \n \xa0\xa0\xa0\xa0 // 中央白日圓形的直徑等於十二道光芒外圍圓形的半徑 \n \xa0\xa0\xa0\xa0 int   white_circle_dia = sun_radius; \n \xa0\xa0\xa0\xa0 // 中央藍色圓形半徑為中央白日的 1又 2/15 \n \xa0\xa0\xa0\xa0 int   blue_circle_dia = white_circle_dia +\xa0 white_circle_dia*2/15; \n \xa0\xa0\xa0\xa0 // 根據 https://www.moi.gov.tw/cp.aspx?n=10621 訂定國旗三種顏色值 \n \xa0\xa0\xa0\xa0 red = gdImageColorAllocate(img, 255, 0, 0);  // 紅色 \n \xa0\xa0\xa0\xa0 white = gdImageColorAllocate(img, 255, 255, 255);  // 白色 \n \xa0\xa0\xa0\xa0 blue = gdImageColorAllocate(img, 0, 0, 149);  // 藍色 \n \xa0\xa0\xa0\xa0 // 根據畫布大小塗上紅色長方形區域 \n \xa0\xa0\xa0\xa0 gdImageFilledRectangle(img, 0, 0, width, height, red); \n \xa0\xa0\xa0\xa0 // 青天面積為整面國旗的 1/4, 也是採用長方形塗色 \n \xa0\xa0\xa0\xa0 gdImageFilledRectangle(img, 0, 0, ( int )(width/2.0), ( int )(height/2.0), blue); \n \xa0\xa0\xa0\xa0 // 先設法以填色畫出六個白色堆疊菱形 \n \xa0\xa0\xa0\xa0 draw_white_sun(img, center_x, center_y, sun_radius, white); \n \xa0\xa0\xa0\xa0 // 利用一個藍色大圓與白色小圓畫出藍色環狀 \n \xa0\xa0\xa0\xa0 gdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue); \n \xa0\xa0\xa0\xa0 gdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white); \n \xa0 \n } \n \xa0 \n void   draw_white_sun(gdImagePtr img,  int   center_x,  int   center_y,  int   sun_radius,  int   color) { \n \xa0\xa0\xa0\xa0 // M_PI 大小定義於 math.h 標頭檔中, 因為三角函數中採用徑度為角度單位 \n \xa0\xa0\xa0\xa0 // 因此定義將角度轉為徑度的轉換變數為 deg, 角度值乘上 deg 就可轉為徑度 \n \xa0\xa0\xa0\xa0 float   deg = M_PI/180; \n \xa0\xa0\xa0\xa0 // 根據十二道光芒的每一尖角的角度為 15 度, 求出其對應直角三角形的另一角度為 75 度 \n \xa0\xa0\xa0\xa0 // 求出十二道光芒中任一菱形的 small radius, 也就是菱形的另一個對應小圓的半徑大小 \n \xa0\xa0\xa0\xa0 float   sr = sun_radius/ tan (75*deg); \n \xa0\xa0\xa0\xa0 int   ax, ay, bx, by, dx, dy, ex, ey; \n \xa0\xa0\xa0\xa0 gdPoint points[4]; \n \xa0\xa0\xa0\xa0 /* 在塗上十二道光芒中的單一菱形區域之前, 先以座標點畫線測試是否正確 \n \xa0\xa0\xa0\xa0 ax = center_x; \n \xa0\xa0\xa0\xa0 ay = center_y - sun_radius; \n \xa0\xa0\xa0\xa0 bx = center_x - sun_radius*tan(15*deg); \n \xa0\xa0\xa0\xa0 by = center_y; \n \xa0\xa0\xa0\xa0 ex = center_x; \n \xa0\xa0\xa0\xa0 ey = center_y + sun_radius; \n \xa0\xa0\xa0\xa0 dx = center_x + sun_radius*tan(15*deg); \n \xa0\xa0\xa0\xa0 dy = center_y; \n \xa0\xa0\xa0\xa0 // AB \n \xa0\xa0\xa0\xa0 gdImageLine(img, ax, ay, bx, by, color); \n \xa0\xa0\xa0\xa0 // BE \n \xa0\xa0\xa0\xa0 gdImageLine(img, bx, by, ex, ey, color); \n \xa0\xa0\xa0\xa0 // ED \n \xa0\xa0\xa0\xa0 gdImageLine(img, ex, ey, dx, dy, color); \n \xa0\xa0\xa0\xa0 // DA \n \xa0\xa0\xa0\xa0 gdImageLine(img, dx, dy, ax, ay, color); \n \xa0\xa0\xa0\xa0 */ \n \xa0\xa0\xa0\xa0 ax = center_x; \n \xa0\xa0\xa0\xa0 ay = center_y - sun_radius; \n \xa0\xa0\xa0\xa0 bx = center_x - sun_radius* tan (15*deg); \n \xa0\xa0\xa0\xa0 by = center_y; \n \xa0\xa0\xa0\xa0 ex = center_x; \n \xa0\xa0\xa0\xa0 ey = center_y + sun_radius; \n \xa0\xa0\xa0\xa0 dx = center_x + sun_radius* tan (15*deg); \n \xa0\xa0\xa0\xa0 dy = center_y; \n \xa0\xa0\xa0\xa0 // 確定單一菱形區域的塗色正確後, 利用迴圈每次轉動 30 度, 總共轉六次即可塗上十二道光芒區域 \n \xa0\xa0\xa0\xa0 for   ( int   i=1;i<=6;i++){ \n \xa0\xa0\xa0\xa0 // A \n \xa0\xa0\xa0\xa0 points[0].x = ax+sun_radius* sin (30*deg*i); \n \xa0\xa0\xa0\xa0 points[0].y = ay+sun_radius-sun_radius* cos (30*deg*i); \n \xa0\xa0\xa0\xa0 // B \n \xa0\xa0\xa0\xa0 points[1].x = bx+sr-sr* cos (30*deg*i); \n \xa0\xa0\xa0\xa0 points[1].y = by-sr* sin (30*deg*i); \n \xa0\xa0\xa0\xa0 // E \n \xa0\xa0\xa0\xa0 points[2].x = ex-sun_radius* sin (30*deg*i); \n \xa0\xa0\xa0\xa0 points[2].y = ey-(sun_radius-sun_radius* cos (30*deg*i)); \n \xa0\xa0\xa0\xa0 // D \n \xa0\xa0\xa0\xa0 points[3].x = dx-(sr-sr* cos (30*deg*i)); \n \xa0\xa0\xa0\xa0 points[3].y = dy+sr* sin (30*deg*i); \n \xa0\xa0\xa0\xa0 // 對菱形區域範圍塗色 \n \xa0\xa0\xa0\xa0 gdImageFilledPolygon(img, points, 4, color); \n \xa0\xa0\xa0\xa0 // 在菱形區域外圍畫線, 明確界定菱形範圍 \n \xa0\xa0\xa0\xa0 gdImagePolygon(img, points, 4, color); \n \xa0\xa0\xa0\xa0 } \n } \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'ROC.html'}, {'title': 'US', 'text': '\n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17 \n 18 \n 19 \n 20 \n 21 \n 22 \n 23 \n 24 \n 25 \n 26 \n 27 \n 28 \n 29 \n 30 \n 31 \n 32 \n 33 \n 34 \n 35 \n 36 \n 37 \n 38 \n 39 \n 40 \n 41 \n 42 \n 43 \n 44 \n 45 \n 46 \n 47 \n 48 \n 49 \n 50 \n 51 \n 52 \n 53 \n 54 \n 55 \n 56 \n 57 \n 58 \n 59 \n 60 \n 61 \n 62 \n 63 \n 64 \n 65 \n 66 \n 67 \n 68 \n 69 \n 70 \n 71 \n 72 \n 73 \n 74 \n 75 \n 76 \n 77 \n 78 \n 79 \n 80 \n 81 \n 82 \n 83 \n 84 \n 85 \n 86 \n 87 \n 88 \n \n \n \n #include <stdio.h> \n #include <gd.h> \n #include <math.h> \n \xa0 \n void   draw_usa_flag(gdImagePtr img); \n void   draw_star(gdImagePtr img,  int   x,  int   y,  int   size,  int   color,  double   rotation_angle); \n \xa0 \n int   main() { \n \xa0\xa0\xa0\xa0 int   width = 800; \n \xa0\xa0\xa0\xa0 int   height = ( int )(width / 1.9); \n \xa0 \n \xa0\xa0\xa0\xa0 gdImagePtr img = gdImageCreateTrueColor(width, height); \n \xa0\xa0\xa0\xa0 gdImageAlphaBlending(img, 0); \n \xa0 \n \xa0\xa0\xa0\xa0 draw_usa_flag(img); \n \xa0 \n \xa0\xa0\xa0\xa0 FILE   *outputFile =  fopen ( "./../images/usa_flag.png" ,  "wb" ); \n \xa0\xa0\xa0\xa0 if   (outputFile == NULL) { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 fprintf (stderr,  "打开输出文件时出错。\\n" ); \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 return   1; \n \xa0\xa0\xa0\xa0 } \n \xa0 \n \xa0\xa0\xa0\xa0 gdImagePngEx(img, outputFile, 9); \n \xa0\xa0\xa0\xa0 fclose (outputFile); \n \xa0\xa0\xa0\xa0 gdImageDestroy(img); \n \xa0 \n \xa0\xa0\xa0\xa0 return   0; \n } \n \xa0 \n void   draw_usa_flag(gdImagePtr img) { \n \xa0\xa0\xa0\xa0 int   width = gdImageSX(img); \n \xa0\xa0\xa0\xa0 int   height = gdImageSY(img); \n \xa0\xa0\xa0\xa0 int   red, white, blue; \n \xa0\xa0\xa0\xa0 // 国旗颜色 \n \xa0\xa0\xa0\xa0 red = gdImageColorAllocate(img, 178, 34, 52);  // 红色条纹 \n \xa0\xa0\xa0\xa0 white = gdImageColorAllocate(img, 255, 255, 255);  // 白色条纹 \n \xa0\xa0\xa0\xa0 blue = gdImageColorAllocate(img, 60, 59, 110);  // 蓝色矩形 \n \xa0 \n \xa0\xa0\xa0\xa0 int   stripe_height = height / 13; \n \xa0\xa0\xa0\xa0 int   stripe_width = width; \n \xa0\xa0\xa0\xa0 int   star_size = ( int )(0.0308 * height);  // 星星大小 \n \xa0 \n \xa0\xa0\xa0\xa0 for   ( int   y = 0; y < height; y += stripe_height) { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if   (y / stripe_height % 2 == 0) { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, red); \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 }  else   { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, white); \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 } \n \xa0\xa0\xa0\xa0 } \n \xa0 \n \xa0\xa0\xa0\xa0 gdImageFilledRectangle(img, 0, 0, width * 2 / 5, stripe_height * 7, blue); \n \xa0 \n \xa0\xa0\xa0\xa0 int   star_spacing_x = ( int )(0.129 * height);  // 横向星星之间的间距 \n \xa0\xa0\xa0\xa0 int   star_spacing_y = ( int )(0.054 * height);  // 纵向星星之间的间距 \n \xa0\xa0\xa0\xa0 int   star_start_x = ( int )(0.125 * height);  // 星星的起始X位置 \n \xa0\xa0\xa0\xa0 int   star_start_y = ( int )(0.0485 * height);  // 星星的起始Y位置 \n \xa0 \n \xa0\xa0\xa0\xa0 for   ( int   row = 0; row < 9; row++) { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 int   starsPerRow = (row % 2 == 0) ? 6 : 5; \n \xa0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // 计算2、4、6和8排星星的偏移量 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 int   offset_x = (row % 2 == 0) ? star_spacing_x / -2 : 0; \n \xa0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 for   ( int   star = 0; star < starsPerRow; star++) { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 int   x = star_start_x + star * star_spacing_x + offset_x; \n \xa0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // 旋转角度（以弧度为单位） \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 double   rotation_angle = M_PI / 5;  // 忘記多少度的旋转 \n \xa0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 int   y = star_start_y + row * star_spacing_y; \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 draw_star(img, x, y, star_size, white, rotation_angle); \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 } \n \xa0\xa0\xa0\xa0 } \n } \n \xa0 \n void   draw_star(gdImagePtr img,  int   x,  int   y,  int   size,  int   color,  double   rotation_angle) { \n \xa0\xa0\xa0\xa0 gdPoint points[10]; \n \xa0 \n \xa0\xa0\xa0\xa0 for   ( int   i = 0; i < 10; i++) { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 double   angle = M_PI / 2 + i * 2 * M_PI / 10 + rotation_angle; \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 int   radius = (i % 2 == 0) ? size : size / 2; \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 points[i].x = x + radius *  cos (angle); \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 points[i].y = y + radius *  sin (angle); \n \xa0\xa0\xa0\xa0 } \n \xa0 \n \xa0\xa0\xa0\xa0 // 用指定的颜色填充星星 \n \xa0\xa0\xa0\xa0 gdImageFilledPolygon(img, points, 10, color); \n } \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'US.html'}, {'title': 'Japan', 'text': 'gd_japan_flag.c \n \n', 'tags': '', 'url': 'Japan.html'}, {'title': 'China', 'text': 'gd_china_flag.c \n \n', 'tags': '', 'url': 'China.html'}, {'title': 'UK', 'text': 'gd_uk_flag.c \n', 'tags': '', 'url': 'UK.html'}, {'title': 'c_ex', 'text': 'C 程式練習一 : \n 請從\xa0 https://www.w3resource.com/c-programming-exercises/ \xa0 網頁中自選 10 個練習範例, 分別在 Replit, Windows 與 Linux (or macOS) 中執行後, 取下執行畫面放入個人的 Github Pages 網頁 (即帳號.github.io 網站), 以 \xa0 ANSIC \xa0 作為頁面標題並詳細說明每一行的程式語法. \n C 程式練習二 : \n 請從\xa0 jsliu_c_programming.pdf \xa0 (需要下載密碼)與\xa0 Introduction to C \xa0(經由校園網路或 VPN 下載)電子書中各擷取 10 個\xa0C 程式範例, 分別: \n 1. 在可攜程式環境中以 SciTE + Tiny C Compiler 編譯系統, 使用 Tools - Go 類編譯方式執行. \n 2. 在可攜程式環境中以 SciTE + Tiny C Compiler 編譯系統, 使用 Tools - Compile 編譯連結後取得 a.out, 然後在命令列中以 a.out 執行. \n 3. 在 Replit 全球資訊網 IDE 環境中的 Shell 頁面, 以 cc ex1.c 產生可執行檔案 a.out, 並以 ./a.out 執行, 或者以 cc ex1.c -o ex1 指定編譯連結後的可執行檔案名稱為 ex1 後, 以 ./ex1 執行.', 'tags': '', 'url': 'c_ex.html'}, {'title': '個人學習心得', 'text': '41023101:除了維護個人的倉儲及編輯網頁，老師利用協同讓我們學習分工，協同最主要就是像外面業界的專案，也像我們的專題製作，如果協同少了任何一位人力，在分工方面就會需要更多的時間來完成。 \n 41023131: \n 這堂課從一開始到現在收穫很多，雖然我是重修這門課，但學到了不同的方式去了解python程式。 在第一次修課時，可能是因為種種原因，也包括自己沒有很認真參與課堂，這次多了一個機會去改正和成長，在更積極地與與同學討論程式和過程中遇到的麻煩，解決問題。最後，這次重修讓我意識到學習是一個持續不斷的過程，雖然我重修了這門課，相反，這是一個機會去再更了解這堂課所教的python語言。 \n 41023141:這堂課雖然是重修，但依然學到了不同的東西，像replit之前因為要付錢才能使用，但這學期前面一到兩個月期前面有免費開放使用，雖然只有一小段時間，但還是知道了一些有關replit的操作，以及C語言的修改。 \n 41223101:這堂課讓我學到不少，包括網路的設定、replit的創建和更新以及在GitHub可以擁有自己的倉儲，在這期間我也意識到團隊合作的重要性，我也會努力盡一份力希望自己能幫助到團隊裡的各位，一起讓我們的網頁更有完整性。 \n 41223104:經過半學期以來的課程，接觸到了c語言和如何利用Replit來編寫程式並且使用寫出的程式來畫出想要的圖形，還有使用Github維護自己個人的倉儲網站，更新自己的學習進度。一開始因為第一次接觸，上課內容遠比我預想的還要艱難，完全搞不懂要做什麼，所以只能到處求助老師和同學幫忙。在這當中也覺得老師和同學很厲害，怎麼能理解以及編寫這麽多複雜不易懂的程式，我自己也想要理解和擁有自己編寫了解程式的能力，所以跟著老師和同學的腳步慢慢學習。到後來短短的半學期過去了，但我漸漸地卻越來越了解這門課的學習方向。不只是老師平時上課的講解以及教學，更多的是透過向同學詢問、上網查詢相關術語解釋還有一起討論。一天一天的了解、學習，累積下來讓我在課堂中可以更加簡單上手，對這門課程越來越有信心！我認為上這門課程收穫的不僅只是學習這些知識而已，還有自己與同學如何一起解決難題、分享想法、討論也培養了耐心、細心還有想要學習的一顆心，在半學期的學習之中相當受益良多，可說是非常難能可貴！ \n 41223105:這學期快要結束了，我終於對計算機程式這門課總算有一點概念，加上協同裡有學長姐們，他們協助我們非常多，這跟一開學的效率差很多，透過協同，我們可以共享資源、知識、技能，以達到共同的目標，以及促進團隊合作，增進效率。協同 是指不同個體之間合作共同達成某個目標或完成特定任務的過程，不只自己要 盡力地把功課用好，團隊也是很重要的。 \n 41223106:這門課程分組的目的是讓我們能學習合作，想要獲得好成果避免不了的是互相，每個人都有自己的強項，能在需要的時候給予建議、並共同完成，這就是團隊的重要性，這個網頁是我們這組同學所一起留下合作的痕跡，讓我們一起記錄了我們學習的內容，包括建立倉儲、網路設定、網頁編輯、程式的使用。 \n 41223120:剛開始學習這門課真的相當痛苦，後來有去詢問同學們的意見，比較有一個方向的感覺，對自己也比較重拾了一點信心，在計算機程式課程中學到了IPv4和IPv6的網路設定及github等等的程式，這些程式在外來用到的機率也會大幅提升，因為幾千幾萬個東西聚集在一起做總總的計算電腦程式的出錯率絕對是最低的，但也要練習打程式的速度及邏輯， 讓我收益良多，也懂得遇到困難該如何解決的精神，也有許多課程單元需要團隊合作，也讓我學到團隊互助的精神。 \n 41223153:接觸到從未使用過的程式語言，並使用程式語言建立GitHub倉儲、網頁，使用replit來維護和更新自己的網頁，再把每次上課的作業和學習成果，放上網頁並留下紀錄。在這門課程中，從一開始的陌生到能熟練操作，在這段過程中也經歷了失敗與難關，這時就能提出和組員們一起討論，在組員遇到困難時，也及時幫助對方，這也展現出團隊合作的重要性，畢竟【人多力量大，柴多火焰高】。', 'tags': '', 'url': '個人學習心得.html'}, {'title': 'note', 'text': '內容為上課相關設定 \n', 'tags': '', 'url': 'note.html'}, {'title': 'clone', 'text': '帳號連接 : \n 利用 命令提示字元 (小黑窗) 連接個人倉儲 編輯網頁: \n 開啟小黑窗ipv6 \n 打\xa0git clone --recurse-submodules 空格 複製貼上下列圖片網址 \n 完成後enter \n \n \n token設定 \n Personal access tokens \n 開啟github帳號點選右上頭像並點選Settings 點選Developer settings 點選Personal access tokens 點選Generate new token(classic) Note 名稱(任意) Expiration 到期(建議90天) 勾選repo(第一個) 點選最下面的Generate token 複製產生出來的token 開啟可攜系統 開啟欲設Personal access tokens的資料夾 點開 .git (要開隱藏項目才看的到) 將裡面的 congif拉到SciTE (灰色圓球) 將複製的字串貼在github.com的前面再加上 @並存檔(CTRL+S) Personal access tokens就設定完成 \n 最後再回到可攜系統打cms enter後，即可順利開啟近端編輯個人網頁 \n', 'tags': '', 'url': 'clone.html'}, {'title': 'ssh', 'text': '下載putty \n 在putty資料夾內開啟puttygen.exe生成一把鑰匙 \n 將key儲存在github帳號內(開啟設定點選ssh) \n 回到puttygen.exe按save private key即可 \n 再開啟putty \n Host Name輸入github.com \n Saved Sessions輸入自己的學號 \n \n 點選proxy改設定 \n \n 再點選ssh內的Auth裡面Credentials \n \n 匯出即可', 'tags': '', 'url': 'ssh.html'}]};